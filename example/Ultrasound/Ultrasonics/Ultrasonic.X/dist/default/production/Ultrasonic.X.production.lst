

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Mar 16 16:32:19 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x5E,2
    18  0000                     
    19                           ; Version 1.43
    20                           ; Generated 25/07/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC12F675 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0019                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  008C                     	;# 
    72  008E                     	;# 
    73  0090                     	;# 
    74  0095                     	;# 
    75  0096                     	;# 
    76  0096                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009A                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  009F                     	;# 
    85                           
    86                           	psect	idataBANK0
    87  01E7                     __pidataBANK0:	
    88                           
    89                           ;initializer for _n_time_off
    90  01E7  34C0               	retlw	192
    91  01E8  3403               	retlw	3
    92                           
    93                           ;initializer for _n_pings
    94  01E9  3406               	retlw	6
    95                           
    96                           	psect	strings
    97  01E0                     __pstrings:	
    98  01E0                     stringtab:	
    99  01E0                     __stringtab:	
   100  01E0                     stringcode:	
   101                           ;	String table - string pointers are 1 byte each
   102                           
   103  01E0                     stringdir:	
   104  01E0  3001               	movlw	high stringdir
   105  01E1  008A               	movwf	10
   106  01E2  0804               	movf	4,w
   107  01E3  0A84               	incf	4,f
   108  01E4  0782               	addwf	2,f
   109  01E5                     __stringbase:	
   110  01E5  3400               	retlw	0
   111  01E6                     __end_of__stringtab:	
   112  01E6                     _n_bins:	
   113  01E6  3404               	retlw	4
   114  01E7                     __end_of_n_bins:	
   115  0001                     _TMR0	set	1
   116  001E                     _ADRESH	set	30
   117  0005                     _GPIO	set	5
   118  000B                     _INTCON	set	11
   119  0019                     _CMCON	set	25
   120  002B                     _GPIO3	set	43
   121  0058                     _GPIF	set	88
   122  005A                     _T0IF	set	90
   123  002D                     _GPIO5	set	45
   124  00F9                     _GO	set	249
   125  005F                     _GIE	set	95
   126  00F8                     _ADON	set	248
   127  00FA                     _CHS0	set	250
   128  00FB                     _CHS1	set	251
   129  00FE                     _VCFG	set	254
   130  00FF                     _ADFM	set	255
   131  005D                     _T0IE	set	93
   132  009E                     _ADRESL	set	158
   133  0085                     _TRISIO	set	133
   134  0099                     _VRCON	set	153
   135  0408                     _PS0	set	1032
   136  0409                     _PS1	set	1033
   137  040A                     _PS2	set	1034
   138  040B                     _PSA	set	1035
   139  040D                     _T0CS	set	1037
   140  04FA                     _ANS2	set	1274
   141  04FB                     _ANS3	set	1275
   142  04FC                     _ADCS0	set	1276
   143  04FD                     _ADCS1	set	1277
   144  04FE                     _ADCS2	set	1278
   145  04B3                     _IOC3	set	1203
   146                           
   147                           ; #config settings
   148  0000                     
   149                           	psect	cinit
   150  0010                     start_initialization:	
   151  0010                     __initialization:	
   152                           
   153                           ; Initialize objects allocated to BANK0
   154  0010  21E7               	fcall	__pidataBANK0	;fetch initializer
   155  0011  00CD               	movwf	__pdataBANK0& (0+127)
   156  0012  21E8               	fcall	__pidataBANK0+1	;fetch initializer
   157  0013  00CE               	movwf	(__pdataBANK0+1)& (0+127)
   158  0014  21E9               	fcall	__pidataBANK0+2	;fetch initializer
   159  0015  00CF               	movwf	(__pdataBANK0+2)& (0+127)
   160                           
   161                           ; Clear objects allocated to BANK0
   162  0016  1383               	bcf	3,7	;select IRP bank0
   163  0017  3020               	movlw	low __pbssBANK0
   164  0018  0084               	movwf	4
   165  0019  303A               	movlw	low (__pbssBANK0+26)
   166  001A  21D8               	fcall	clear_ram0
   167                           
   168                           ; Clear objects allocated to BITBANK0
   169  001B  01CC               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   170  001C                     end_of_initialization:	
   171                           ;End of C runtime variable initialization code
   172                           
   173  001C                     __end_of__initialization:	
   174  001C  0183               	clrf	3
   175  001D  281E               	ljmp	_main	;jump to C main() function
   176                           
   177                           	psect	bitbssBANK0
   178  0260                     __pbitbssBANK0:	
   179  0260                     _measured:	
   180  0260                     	ds	1
   181  0261                     _led_on:	
   182  0261                     	ds	1
   183  0262                     _flag_button:	
   184  0262                     	ds	1
   185                           
   186                           	psect	bssBANK0
   187  0020                     __pbssBANK0:	
   188  0020                     _mag:	
   189  0020                     	ds	3
   190  0023                     _old_mag:	
   191  0023                     	ds	3
   192  0026                     _temp:	
   193  0026                     	ds	3
   194  0029                     _a2:	
   195  0029                     	ds	2
   196  002B                     _a1:	
   197  002B                     	ds	2
   198  002D                     _pulse_sensitivity:	
   199  002D                     	ds	2
   200  002F                     _dc_offset:	
   201  002F                     	ds	2
   202  0031                     _time_count:	
   203  0031                     	ds	2
   204  0033                     _h2:	
   205  0033                     	ds	1
   206  0034                     _h1:	
   207  0034                     	ds	1
   208  0035                     _new_measured:	
   209  0035                     	ds	1
   210  0036                     _tmp_GPIO:	
   211  0036                     	ds	1
   212  0037                     _delay_time:	
   213  0037                     	ds	1
   214  0038                     _ping_time_count:	
   215  0038                     	ds	1
   216  0039                     _led_counter:	
   217  0039                     	ds	1
   218                           
   219                           	psect	dataBANK0
   220  004D                     __pdataBANK0:	
   221  004D                     _n_time_off:	
   222  004D                     	ds	2
   223  004F                     _n_pings:	
   224  004F                     	ds	1
   225                           
   226                           	psect	clrtext
   227  01D8                     clear_ram0:	
   228                           ;	Called with FSR containing the base address, and
   229                           ;	W with the last address+1
   230                           
   231  01D8  0064               	clrwdt	;clear the watchdog before getting into this loop
   232  01D9                     clrloop0:	
   233  01D9  0180               	clrf	0	;clear RAM location pointed to by FSR
   234  01DA  0A84               	incf	4,f	;increment pointer
   235  01DB  0604               	xorwf	4,w	;XOR with final address
   236  01DC  1903               	btfsc	3,2	;have we reached the end yet?
   237  01DD  3400               	retlw	0	;all done for this memory range, return
   238  01DE  0604               	xorwf	4,w	;XOR again to restore value
   239  01DF  29D9               	goto	clrloop0	;do the next byte
   240                           
   241                           	psect	cstackCOMMON
   242  0000                     __pcstackCOMMON:	
   243  0000                     ??___wmul:	
   244                           
   245                           	psect	cstackBANK0
   246  003A                     __pcstackBANK0:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  003A                     ?_main:	
   250  003A                     ?_ISR:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  003A                     ??_ISR:	
   254                           ; 1 bytes @ 0x0
   255                           
   256                           
   257                           ; 1 bytes @ 0x0
   258  003A                     	ds	5
   259  003F                     ?___wmul:	
   260  003F                     ___wmul@multiplier:	
   261                           ; 2 bytes @ 0x5
   262                           
   263                           
   264                           ; 2 bytes @ 0x5
   265  003F                     	ds	2
   266  0041                     ___wmul@multiplicand:	
   267                           
   268                           ; 2 bytes @ 0x7
   269  0041                     	ds	2
   270  0043                     ___wmul@product:	
   271                           
   272                           ; 2 bytes @ 0x9
   273  0043                     	ds	2
   274  0045                     ??_main:	
   275                           
   276                           ; 1 bytes @ 0xB
   277  0045                     	ds	6
   278  004B                     main@i:	
   279                           
   280                           ; 1 bytes @ 0x11
   281  004B                     	ds	1
   282                           
   283                           	psect	maintext
   284  001E                     __pmaintext:	
   285 ;;
   286 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   287 ;;
   288 ;; *************** function _main *****************
   289 ;; Defined at:
   290 ;;		line 75 in file "../../main.c"
   291 ;; Parameters:    Size  Location     Type
   292 ;;		None
   293 ;; Auto vars:     Size  Location     Type
   294 ;;  i               1   17[BANK0 ] unsigned char 
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : B00/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMMON   BANK0
   304 ;;      Params:         0       0
   305 ;;      Locals:         0       1
   306 ;;      Temps:          0       6
   307 ;;      Totals:         0       7
   308 ;;Total ram usage:        7 bytes
   309 ;; Hardware stack levels required when called:    2
   310 ;; This function calls:
   311 ;;		___wmul
   312 ;; This function is called by:
   313 ;;		Startup code after reset
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317                           
   318                           ;psect for function _main
   319  001E                     _main:	
   320                           
   321                           ;incstack = 0
   322                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   323  001E  23FF               	call	1023	;# 
   324  001F  1683               	bsf	3,5	;# 
   325  0020  0090               	movwf	144	;# 
   326                           
   327                           ;main.c: 84: VRCON = 0X00;
   328  0021  1683               	bsf	3,5	;RP0=1, select bank1
   329  0022  0199               	clrf	25	;volatile
   330                           
   331                           ;main.c: 85: CMCON = 0X07;
   332  0023  3007               	movlw	7
   333  0024  1283               	bcf	3,5	;RP0=0, select bank0
   334  0025  0099               	movwf	25	;volatile
   335                           
   336                           ;main.c: 88: INTCON = 0x00;
   337  0026  018B               	clrf	11	;volatile
   338                           
   339                           ;main.c: 89: T0IE = 1;
   340  0027  168B               	bsf	11,5	;volatile
   341                           
   342                           ;main.c: 93: TRISIO = 0b00011100;
   343  0028  301C               	movlw	28
   344  0029  1683               	bsf	3,5	;RP0=1, select bank1
   345  002A  0085               	movwf	5	;volatile
   346                           
   347                           ;main.c: 94: GPIO = 0x00;
   348  002B  1283               	bcf	3,5	;RP0=0, select bank0
   349  002C  0185               	clrf	5	;volatile
   350                           
   351                           ;main.c: 95: IOC3 = 1;
   352  002D  1683               	bsf	3,5	;RP0=1, select bank1
   353  002E  1596               	bsf	22,3	;volatile
   354                           
   355                           ;main.c: 98: ADFM = 1;
   356  002F  1283               	bcf	3,5	;RP0=0, select bank0
   357  0030  179F               	bsf	31,7	;volatile
   358                           
   359                           ;main.c: 99: VCFG = 0;
   360  0031  131F               	bcf	31,6	;volatile
   361                           
   362                           ;main.c: 100: CHS1 = 1; CHS0 = 0;
   363  0032  159F               	bsf	31,3	;volatile
   364  0033  111F               	bcf	31,2	;volatile
   365                           
   366                           ;main.c: 102: ADCS2 = 0;
   367  0034  1683               	bsf	3,5	;RP0=1, select bank1
   368  0035  131F               	bcf	31,6	;volatile
   369                           
   370                           ;main.c: 103: ADCS1 = 0;
   371  0036  129F               	bcf	31,5	;volatile
   372                           
   373                           ;main.c: 104: ADCS0 = 1;
   374  0037  161F               	bsf	31,4	;volatile
   375                           
   376                           ;main.c: 105: ANS3 = 1;
   377  0038  159F               	bsf	31,3	;volatile
   378                           
   379                           ;main.c: 106: ANS2 = 1;
   380  0039  151F               	bsf	31,2	;volatile
   381                           
   382                           ;main.c: 107: ADON = 1;
   383  003A  1283               	bcf	3,5	;RP0=0, select bank0
   384  003B  141F               	bsf	31,0	;volatile
   385                           
   386                           ;main.c: 111: T0CS = 0;
   387  003C  1683               	bsf	3,5	;RP0=1, select bank1
   388  003D  1281               	bcf	1,5	;volatile
   389                           
   390                           ;main.c: 112: PSA = 0;
   391  003E  1181               	bcf	1,3	;volatile
   392                           
   393                           ;main.c: 114: PS2 = 0;
   394  003F  1101               	bcf	1,2	;volatile
   395                           
   396                           ;main.c: 115: PS1 = 0;
   397  0040  1081               	bcf	1,1	;volatile
   398                           
   399                           ;main.c: 116: PS0 = 1;
   400  0041  1401               	bsf	1,0	;volatile
   401                           
   402                           ;main.c: 118: GIE = 1;
   403  0042  178B               	bsf	11,7	;volatile
   404                           
   405                           ;main.c: 121: GO = 1;
   406  0043  1283               	bcf	3,5	;RP0=0, select bank0
   407  0044  149F               	bsf	31,1	;volatile
   408  0045                     l109:	
   409                           ;main.c: 122: while (GO);
   410                           
   411  0045  189F               	btfsc	31,1	;volatile
   412  0046  2845               	goto	l109
   413                           
   414                           ;main.c: 123: dc_offset = (ADRESH<<8) | ADRESL;
   415  0047  081E               	movf	30,w	;volatile
   416  0048  00B0               	movwf	_dc_offset+1
   417  0049  1683               	bsf	3,5	;RP0=1, select bank1
   418  004A  081E               	movf	30,w	;volatile
   419  004B  1283               	bcf	3,5	;RP0=0, select bank0
   420  004C  00AF               	movwf	_dc_offset
   421  004D                     l834:	
   422                           ;main.c: 125: while (1)
   423                           
   424                           
   425                           ;main.c: 126: {
   426                           ;main.c: 127: if (led_on)
   427  004D  1CCC               	btfss	_led_on/(0+8),_led_on& (0+7)
   428  004E  2860               	goto	l113
   429                           
   430                           ;main.c: 128: {
   431                           ;main.c: 129: GPIO5 = 1;
   432  004F  1685               	bsf	5,5	;volatile
   433                           
   434                           ;main.c: 130: if (time_count > 40)
   435  0050  0832               	movf	_time_count+1,w	;volatile
   436  0051  3A80               	xorlw	128
   437  0052  00DF               	movwf	95
   438  0053  3080               	movlw	128
   439  0054  025F               	subwf	95,w
   440  0055  1D03               	skipz
   441  0056  2859               	goto	u315
   442  0057  3029               	movlw	41
   443  0058  0231               	subwf	_time_count,w	;volatile
   444  0059                     u315:	
   445  0059  1C03               	skipc
   446  005A  2871               	goto	l850
   447                           
   448                           ;main.c: 131: {
   449                           ;main.c: 132: time_count = 0;
   450  005B  1283               	bcf	3,5	;RP0=0, select bank0
   451  005C  01B1               	clrf	_time_count	;volatile
   452  005D  01B2               	clrf	_time_count+1	;volatile
   453                           
   454                           ;main.c: 133: led_on = 0;
   455  005E  10CC               	bcf	_led_on/(0+8),_led_on& (0+7)
   456                           
   457                           ;main.c: 134: }
   458                           ;main.c: 135: }
   459  005F  2871               	goto	l850
   460  0060                     l113:	
   461                           
   462                           ;main.c: 136: else
   463                           ;main.c: 137: {
   464                           ;main.c: 138: GPIO5 = 0;
   465  0060  1285               	bcf	5,5	;volatile
   466                           
   467                           ;main.c: 139: if (time_count > n_time_off)
   468  0061  084E               	movf	_n_time_off+1,w
   469  0062  3A80               	xorlw	128
   470  0063  00C5               	movwf	??_main
   471  0064  0832               	movf	_time_count+1,w	;volatile
   472  0065  3A80               	xorlw	128
   473  0066  0245               	subwf	??_main,w
   474  0067  1D03               	skipz
   475  0068  286B               	goto	u325
   476  0069  0831               	movf	_time_count,w	;volatile
   477  006A  024D               	subwf	_n_time_off,w
   478  006B                     u325:	
   479  006B  1803               	skipnc
   480  006C  2871               	goto	l850
   481                           
   482                           ;main.c: 140: {
   483                           ;main.c: 141: time_count = 0;
   484  006D  1283               	bcf	3,5	;RP0=0, select bank0
   485  006E  01B1               	clrf	_time_count	;volatile
   486  006F  01B2               	clrf	_time_count+1	;volatile
   487                           
   488                           ;main.c: 142: led_on = 1;
   489  0070  14CC               	bsf	_led_on/(0+8),_led_on& (0+7)
   490  0071                     l850:	
   491                           
   492                           ;main.c: 143: }
   493                           ;main.c: 144: }
   494                           ;main.c: 148: if (ping_time_count > 100)
   495  0071  3065               	movlw	101
   496  0072  1283               	bcf	3,5	;RP0=0, select bank0
   497  0073  0238               	subwf	_ping_time_count,w	;volatile
   498  0074  1C03               	skipc
   499  0075  284D               	goto	l834
   500                           
   501                           ;main.c: 149: {
   502                           ;main.c: 150: ping_time_count = 0;
   503  0076  01B8               	clrf	_ping_time_count	;volatile
   504                           
   505                           ;main.c: 155: CHS1 = 1; CHS0 = 1;
   506  0077  159F               	bsf	31,3	;volatile
   507  0078  151F               	bsf	31,2	;volatile
   508  0079  0000               	nop	;# 
   509  007A  0000               	nop	;# 
   510  007B  0000               	nop	;# 
   511  007C  0000               	nop	;# 
   512                           
   513                           ;main.c: 160: GO = 1;
   514  007D  1283               	bcf	3,5	;RP0=0, select bank0
   515  007E  149F               	bsf	31,1	;volatile
   516  007F                     l118:	
   517                           ;main.c: 161: while (GO);
   518                           
   519  007F  189F               	btfsc	31,1	;volatile
   520  0080  287F               	goto	l118
   521                           
   522                           ;main.c: 171: pulse_sensitivity = (ADRESH<<8)+ADRESL;
   523  0081  081E               	movf	30,w	;volatile
   524  0082  00AE               	movwf	_pulse_sensitivity+1
   525  0083  1683               	bsf	3,5	;RP0=1, select bank1
   526  0084  081E               	movf	30,w	;volatile
   527  0085  1283               	bcf	3,5	;RP0=0, select bank0
   528  0086  00AD               	movwf	_pulse_sensitivity
   529                           
   530                           ;main.c: 172: CHS1 = 1; CHS0 = 0;
   531  0087  159F               	bsf	31,3	;volatile
   532  0088  111F               	bcf	31,2	;volatile
   533                           
   534                           ;main.c: 174: GIE = 0;
   535  0089  138B               	bcf	11,7	;volatile
   536                           
   537                           ;main.c: 175: tmp_GPIO = GPIO;
   538  008A  0805               	movf	5,w	;volatile
   539  008B  00C5               	movwf	??_main
   540  008C  0845               	movf	??_main,w
   541  008D  00B6               	movwf	_tmp_GPIO
   542                           
   543                           ;main.c: 179: for (i=0; i<n_pings; i++)
   544  008E  01CB               	clrf	main@i
   545  008F                     l874:	
   546  008F  084F               	movf	_n_pings,w
   547  0090  024B               	subwf	main@i,w
   548  0091  1803               	btfsc	3,0
   549  0092  28A6               	goto	l123
   550                           
   551                           ;main.c: 180: {
   552                           ;main.c: 187: GPIO = 0x01;
   553  0093  3001               	movlw	1
   554  0094  0085               	movwf	5	;volatile
   555  0095  0000               	nop	;# 
   556  0096  0000               	nop	;# 
   557  0097  0000               	nop	;# 
   558  0098  0000               	nop	;# 
   559  0099  0000               	nop	;# 
   560  009A  0000               	nop	;# 
   561  009B  0000               	nop	;# 
   562  009C  0000               	nop	;# 
   563  009D  0000               	nop	;# 
   564                           
   565                           ;main.c: 199: GPIO = 0x02;
   566  009E  3002               	movlw	2
   567  009F  1283               	bcf	3,5	;RP0=0, select bank0
   568  00A0  0085               	movwf	5	;volatile
   569  00A1  3001               	movlw	1
   570  00A2  00C5               	movwf	??_main
   571  00A3  0845               	movf	??_main,w
   572  00A4  07CB               	addwf	main@i,f
   573  00A5  288F               	goto	l874
   574  00A6                     l123:	
   575                           
   576                           ;main.c: 200: }
   577                           ;main.c: 201: GIE = 1;
   578  00A6  178B               	bsf	11,7	;volatile
   579                           
   580                           ;main.c: 203: delay_time = 2;
   581  00A7  3002               	movlw	2
   582  00A8  00C5               	movwf	??_main
   583  00A9  0845               	movf	??_main,w
   584  00AA  00B7               	movwf	_delay_time
   585  00AB                     l878:	
   586                           ;main.c: 206: while (delay_time);
   587                           
   588  00AB  0837               	movf	_delay_time,w
   589  00AC  1D03               	btfss	3,2
   590  00AD  28AB               	goto	l878
   591                           
   592                           ;main.c: 207: GIE = 0;
   593  00AE  138B               	bcf	11,7	;volatile
   594                           
   595                           ;main.c: 209: GO = 1;
   596  00AF  149F               	bsf	31,1	;volatile
   597  00B0                     l127:	
   598                           ;main.c: 210: while (GO);
   599                           
   600  00B0  189F               	btfsc	31,1	;volatile
   601  00B1  28B0               	goto	l127
   602  00B2  0000               	nop	;# 
   603  00B3  0000               	nop	;# 
   604                           
   605                           ;main.c: 215: GO = 1;
   606  00B4  1283               	bcf	3,5	;RP0=0, select bank0
   607  00B5  149F               	bsf	31,1	;volatile
   608                           
   609                           ;main.c: 216: h1 = ADRESH;
   610  00B6  081E               	movf	30,w	;volatile
   611  00B7  00C5               	movwf	??_main
   612  00B8  0845               	movf	??_main,w
   613  00B9  00B4               	movwf	_h1
   614                           
   615                           ;main.c: 217: h2 = ADRESL;
   616  00BA  1683               	bsf	3,5	;RP0=1, select bank1
   617  00BB  081E               	movf	30,w	;volatile
   618  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   619  00BD  00C5               	movwf	??_main
   620  00BE  0845               	movf	??_main,w
   621  00BF  00B3               	movwf	_h2
   622  00C0                     l130:	
   623                           ;main.c: 218: while (GO);
   624                           
   625  00C0  189F               	btfsc	31,1	;volatile
   626  00C1  28C0               	goto	l130
   627                           
   628                           ;main.c: 220: GPIO = tmp_GPIO;
   629  00C2  0836               	movf	_tmp_GPIO,w
   630  00C3  0085               	movwf	5	;volatile
   631                           
   632                           ;main.c: 221: GIE = 1;
   633  00C4  178B               	bsf	11,7	;volatile
   634                           
   635                           ;main.c: 223: a1 = ((signed short int)(((h1<<8)+h2) - dc_offset));
   636  00C5  092F               	comf	_dc_offset,w
   637  00C6  00C5               	movwf	??_main
   638  00C7  0930               	comf	_dc_offset+1,w
   639  00C8  00C6               	movwf	??_main+1
   640  00C9  0AC5               	incf	??_main,f
   641  00CA  1903               	skipnz
   642  00CB  0AC6               	incf	??_main+1,f
   643  00CC  0845               	movf	??_main,w
   644  00CD  0733               	addwf	_h2,w
   645  00CE  00AB               	movwf	_a1
   646  00CF  0846               	movf	??_main+1,w
   647  00D0  1803               	skipnc
   648  00D1  0A46               	incf	??_main+1,w
   649  00D2  0734               	addwf	_h1,w
   650  00D3  00AC               	movwf	_a1+1
   651                           
   652                           ;main.c: 224: a2 = ((signed short int)(((ADRESH<<8)+ADRESL) - dc_offset));
   653  00D4  092F               	comf	_dc_offset,w
   654  00D5  00C5               	movwf	??_main
   655  00D6  0930               	comf	_dc_offset+1,w
   656  00D7  00C6               	movwf	??_main+1
   657  00D8  0AC5               	incf	??_main,f
   658  00D9  1903               	skipnz
   659  00DA  0AC6               	incf	??_main+1,f
   660  00DB  0845               	movf	??_main,w
   661  00DC  1683               	bsf	3,5	;RP0=1, select bank1
   662  00DD  071E               	addwf	30,w	;volatile
   663  00DE  1283               	bcf	3,5	;RP0=0, select bank0
   664  00DF  00C7               	movwf	??_main+2
   665  00E0  0846               	movf	??_main+1,w
   666  00E1  1803               	skipnc
   667  00E2  0A46               	incf	??_main+1,w
   668  00E3  071E               	addwf	30,w	;volatile
   669  00E4  00C8               	movwf	??_main+3
   670  00E5  0847               	movf	??_main+2,w
   671  00E6  00A9               	movwf	_a2
   672  00E7  0848               	movf	??_main+3,w
   673  00E8  00AA               	movwf	_a2+1
   674                           
   675                           ;main.c: 226: old_mag = mag;
   676  00E9  0820               	movf	_mag,w
   677  00EA  00A3               	movwf	_old_mag
   678  00EB  0821               	movf	_mag+1,w
   679  00EC  00A4               	movwf	_old_mag+1
   680  00ED  0822               	movf	_mag+2,w
   681  00EE  00A5               	movwf	_old_mag+2
   682                           
   683                           ;main.c: 227: mag = ((a1*a1) + (a2*a2));
   684  00EF  082C               	movf	_a1+1,w
   685  00F0  00C0               	movwf	___wmul@multiplier+1
   686  00F1  082B               	movf	_a1,w
   687  00F2  00BF               	movwf	___wmul@multiplier
   688  00F3  082C               	movf	_a1+1,w
   689  00F4  00C2               	movwf	___wmul@multiplicand+1
   690  00F5  082B               	movf	_a1,w
   691  00F6  00C1               	movwf	___wmul@multiplicand
   692  00F7  21B6               	fcall	___wmul
   693  00F8  1283               	bcf	3,5	;RP0=0, select bank0
   694  00F9  083F               	movf	?___wmul,w
   695  00FA  00C5               	movwf	??_main
   696  00FB  0840               	movf	?___wmul+1,w
   697  00FC  00C6               	movwf	??_main+1
   698  00FD  082A               	movf	_a2+1,w
   699  00FE  00C0               	movwf	___wmul@multiplier+1
   700  00FF  0829               	movf	_a2,w
   701  0100  00BF               	movwf	___wmul@multiplier
   702  0101  082A               	movf	_a2+1,w
   703  0102  00C2               	movwf	___wmul@multiplicand+1
   704  0103  0829               	movf	_a2,w
   705  0104  00C1               	movwf	___wmul@multiplicand
   706  0105  21B6               	fcall	___wmul
   707  0106  1283               	bcf	3,5	;RP0=0, select bank0
   708  0107  083F               	movf	?___wmul,w
   709  0108  0745               	addwf	??_main,w
   710  0109  00C7               	movwf	??_main+2
   711  010A  0840               	movf	?___wmul+1,w
   712  010B  1803               	skipnc
   713  010C  0A40               	incf	?___wmul+1,w
   714  010D  0746               	addwf	??_main+1,w
   715  010E  00C8               	movwf	??_main+3
   716  010F  0847               	movf	??_main+2,w
   717  0110  00A0               	movwf	_mag
   718  0111  0848               	movf	??_main+3,w
   719  0112  00A1               	movwf	_mag+1
   720  0113  3000               	movlw	0
   721  0114  1BC8               	btfsc	??_main+3,7
   722  0115  30FF               	movlw	255
   723  0116  00A2               	movwf	_mag+2
   724                           
   725                           ;main.c: 233: if (old_mag > mag)
   726  0117  0825               	movf	_old_mag+2,w
   727  0118  0222               	subwf	_mag+2,w
   728  0119  1D03               	skipz
   729  011A  2921               	goto	u395
   730  011B  0824               	movf	_old_mag+1,w
   731  011C  0221               	subwf	_mag+1,w
   732  011D  1D03               	skipz
   733  011E  2921               	goto	u395
   734  011F  0823               	movf	_old_mag,w
   735  0120  0220               	subwf	_mag,w
   736  0121                     u395:	
   737  0121  1803               	skipnc
   738  0122  292F               	goto	l896
   739                           
   740                           ;main.c: 234: {
   741                           ;main.c: 235: temp = old_mag - mag;
   742  0123  0823               	movf	_old_mag,w
   743  0124  00C5               	movwf	??_main
   744  0125  0824               	movf	_old_mag+1,w
   745  0126  00C6               	movwf	??_main+1
   746  0127  0825               	movf	_old_mag+2,w
   747  0128  00C7               	movwf	??_main+2
   748  0129  0920               	comf	_mag,w
   749  012A  00C8               	movwf	??_main+3
   750  012B  0921               	comf	_mag+1,w
   751  012C  00C9               	movwf	??_main+4
   752  012D  0922               	comf	_mag+2,w
   753  012E  2946               	goto	L3
   754  012F                     l896:	
   755                           ;main.c: 236: }
   756                           
   757                           
   758                           ;main.c: 237: else if (old_mag < mag)
   759  012F  0822               	movf	_mag+2,w
   760  0130  0225               	subwf	_old_mag+2,w
   761  0131  1D03               	skipz
   762  0132  2939               	goto	u415
   763  0133  0821               	movf	_mag+1,w
   764  0134  0224               	subwf	_old_mag+1,w
   765  0135  1D03               	skipz
   766  0136  2939               	goto	u415
   767  0137  0820               	movf	_mag,w
   768  0138  0223               	subwf	_old_mag,w
   769  0139                     u415:	
   770  0139  1803               	skipnc
   771  013A  2960               	goto	l900
   772                           
   773                           ;main.c: 238: {
   774                           ;main.c: 239: temp = mag - old_mag;
   775  013B  0820               	movf	_mag,w
   776  013C  00C5               	movwf	??_main
   777  013D  0821               	movf	_mag+1,w
   778  013E  00C6               	movwf	??_main+1
   779  013F  0822               	movf	_mag+2,w
   780  0140  00C7               	movwf	??_main+2
   781  0141  0923               	comf	_old_mag,w
   782  0142  00C8               	movwf	??_main+3
   783  0143  0924               	comf	_old_mag+1,w
   784  0144  00C9               	movwf	??_main+4
   785  0145  0925               	comf	_old_mag+2,w
   786  0146                     L3:	
   787  0146  00CA               	movwf	??_main+5
   788  0147  0AC8               	incf	??_main+3,f
   789  0148  1903               	skipnz
   790  0149  0AC9               	incf	??_main+4,f
   791  014A  1903               	skipnz
   792  014B  0ACA               	incf	??_main+5,f
   793  014C  0848               	movf	??_main+3,w
   794  014D  07C5               	addwf	??_main,f
   795  014E  0849               	movf	??_main+4,w
   796  014F  1803               	skipnc
   797  0150  0F49               	incfsz	??_main+4,w
   798  0151  2953               	goto	u421
   799  0152  2954               	goto	u422
   800  0153                     u421:	
   801  0153  07C6               	addwf	??_main+1,f
   802  0154                     u422:	
   803  0154  084A               	movf	??_main+5,w
   804  0155  1803               	skipnc
   805  0156  0F4A               	incfsz	??_main+5,w
   806  0157  2959               	goto	u423
   807  0158  295A               	goto	u424
   808  0159                     u423:	
   809  0159  07C7               	addwf	??_main+2,f
   810  015A                     u424:	
   811  015A  0845               	movf	??_main,w
   812  015B  00A6               	movwf	_temp
   813  015C  0846               	movf	??_main+1,w
   814  015D  00A7               	movwf	_temp+1
   815  015E  0847               	movf	??_main+2,w
   816  015F  2965               	goto	L1
   817  0160                     l900:	
   818                           ;main.c: 240: }
   819                           
   820                           
   821                           ;main.c: 241: else
   822                           ;main.c: 242: {
   823                           ;main.c: 243: temp = 0;
   824  0160  3000               	movlw	0
   825  0161  00A6               	movwf	_temp
   826  0162  3000               	movlw	0
   827  0163  00A7               	movwf	_temp+1
   828  0164  3000               	movlw	0
   829  0165                     L1:	
   830  0165  00A8               	movwf	_temp+2
   831                           
   832                           ;main.c: 244: }
   833                           ;main.c: 246: if ((temp>>4) > (pulse_sensitivity))
   834  0166  0826               	movf	_temp,w
   835  0167  00C5               	movwf	??_main
   836  0168  0827               	movf	_temp+1,w
   837  0169  00C6               	movwf	??_main+1
   838  016A  0828               	movf	_temp+2,w
   839  016B  00C7               	movwf	??_main+2
   840  016C  3004               	movlw	4
   841  016D                     u435:	
   842  016D  1003               	clrc
   843  016E  0CC7               	rrf	??_main+2,f
   844  016F  0CC6               	rrf	??_main+1,f
   845  0170  0CC5               	rrf	??_main,f
   846  0171  3EFF               	addlw	-1
   847  0172  1D03               	skipz
   848  0173  296D               	goto	u435
   849  0174  082D               	movf	_pulse_sensitivity,w
   850  0175  00C8               	movwf	??_main+3
   851  0176  082E               	movf	_pulse_sensitivity+1,w
   852  0177  00C9               	movwf	??_main+4
   853  0178  3000               	movlw	0
   854  0179  1BC9               	btfsc	??_main+4,7
   855  017A  30FF               	movlw	255
   856  017B  00CA               	movwf	??_main+5
   857  017C  0847               	movf	??_main+2,w
   858  017D  024A               	subwf	??_main+5,w
   859  017E  1D03               	skipz
   860  017F  2986               	goto	u445
   861  0180  0846               	movf	??_main+1,w
   862  0181  0249               	subwf	??_main+4,w
   863  0182  1D03               	skipz
   864  0183  2986               	goto	u445
   865  0184  0845               	movf	??_main,w
   866  0185  0248               	subwf	??_main+3,w
   867  0186                     u445:	
   868  0186  1803               	skipnc
   869  0187  298C               	goto	l906
   870                           
   871                           ;main.c: 247: {
   872                           ;main.c: 248: n_time_off = 160;
   873  0188  30A0               	movlw	160
   874  0189  00CD               	movwf	_n_time_off
   875  018A  3000               	movlw	0
   876  018B  298F               	goto	L2
   877  018C                     l906:	
   878                           ;main.c: 249: }
   879                           
   880                           
   881                           ;main.c: 250: else
   882                           ;main.c: 251: {
   883                           ;main.c: 252: n_time_off = 960;
   884  018C  30C0               	movlw	192
   885  018D  00CD               	movwf	_n_time_off
   886  018E  3003               	movlw	3
   887  018F                     L2:	
   888  018F  00CE               	movwf	_n_time_off+1
   889  0190  284D               	goto	l834
   890  0191                     __end_of_main:	
   891                           
   892                           	psect	text1
   893  01B6                     __ptext1:	
   894 ;; *************** function ___wmul *****************
   895 ;; Defined at:
   896 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;  multiplier      2    5[BANK0 ] unsigned int 
   899 ;;  multiplicand    2    7[BANK0 ] unsigned int 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  product         2    9[BANK0 ] unsigned int 
   902 ;; Return value:  Size  Location     Type
   903 ;;                  2    5[BANK0 ] unsigned int 
   904 ;; Registers used:
   905 ;;		wreg, status,2, status,0
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMMON   BANK0
   911 ;;      Params:         0       4
   912 ;;      Locals:         0       2
   913 ;;      Temps:          0       0
   914 ;;      Totals:         0       6
   915 ;;Total ram usage:        6 bytes
   916 ;; Hardware stack levels used:    1
   917 ;; Hardware stack levels required when called:    1
   918 ;; This function calls:
   919 ;;		Nothing
   920 ;; This function is called by:
   921 ;;		_main
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           
   926                           ;psect for function ___wmul
   927  01B6                     ___wmul:	
   928                           
   929                           ;incstack = 0
   930                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   931  01B6  1283               	bcf	3,5	;RP0=0, select bank0
   932  01B7  01C3               	clrf	___wmul@product
   933  01B8  01C4               	clrf	___wmul@product+1
   934  01B9                     l772:	
   935  01B9  1C3F               	btfss	___wmul@multiplier,0
   936  01BA  29C1               	goto	l234
   937  01BB  0841               	movf	___wmul@multiplicand,w
   938  01BC  07C3               	addwf	___wmul@product,f
   939  01BD  1803               	skipnc
   940  01BE  0AC4               	incf	___wmul@product+1,f
   941  01BF  0842               	movf	___wmul@multiplicand+1,w
   942  01C0  07C4               	addwf	___wmul@product+1,f
   943  01C1                     l234:	
   944  01C1  3001               	movlw	1
   945  01C2                     u265:	
   946  01C2  1003               	clrc
   947  01C3  0DC1               	rlf	___wmul@multiplicand,f
   948  01C4  0DC2               	rlf	___wmul@multiplicand+1,f
   949  01C5  3EFF               	addlw	-1
   950  01C6  1D03               	skipz
   951  01C7  29C2               	goto	u265
   952  01C8  3001               	movlw	1
   953  01C9                     u275:	
   954  01C9  1003               	clrc
   955  01CA  0CC0               	rrf	___wmul@multiplier+1,f
   956  01CB  0CBF               	rrf	___wmul@multiplier,f
   957  01CC  3EFF               	addlw	-1
   958  01CD  1D03               	skipz
   959  01CE  29C9               	goto	u275
   960  01CF  083F               	movf	___wmul@multiplier,w
   961  01D0  0440               	iorwf	___wmul@multiplier+1,w
   962  01D1  1D03               	btfss	3,2
   963  01D2  29B9               	goto	l772
   964  01D3  0844               	movf	___wmul@product+1,w
   965  01D4  00C0               	movwf	?___wmul+1
   966  01D5  0843               	movf	___wmul@product,w
   967  01D6  00BF               	movwf	?___wmul
   968  01D7  0008               	return
   969  01D8                     __end_of___wmul:	
   970                           
   971                           	psect	text2
   972  0191                     __ptext2:	
   973 ;; *************** function _ISR *****************
   974 ;; Defined at:
   975 ;;		line 258 in file "../../main.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;		None
   978 ;; Auto vars:     Size  Location     Type
   979 ;;		None
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		wreg, status,2, status,0
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMMON   BANK0
   989 ;;      Params:         0       0
   990 ;;      Locals:         0       0
   991 ;;      Temps:          0       5
   992 ;;      Totals:         0       5
   993 ;;Total ram usage:        5 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		Interrupt level 1
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           
  1003                           ;psect for function _ISR
  1004  0191                     _ISR:	
  1005                           
  1006                           ;main.c: 260: if (T0IF)
  1007  0191  1D0B               	btfss	11,2	;volatile
  1008  0192  29A4               	goto	i1l922
  1009                           
  1010                           ;main.c: 261: {
  1011                           ;main.c: 262: T0IF = 0;
  1012  0193  110B               	bcf	11,2	;volatile
  1013                           
  1014                           ;main.c: 263: TMR0 = 0;
  1015  0194  0181               	clrf	1	;volatile
  1016                           
  1017                           ;main.c: 264: time_count++;
  1018  0195  3001               	movlw	1
  1019  0196  07B1               	addwf	_time_count,f	;volatile
  1020  0197  1803               	skipnc
  1021  0198  0AB2               	incf	_time_count+1,f	;volatile
  1022  0199  3000               	movlw	0
  1023  019A  07B2               	addwf	_time_count+1,f	;volatile
  1024                           
  1025                           ;main.c: 265: ping_time_count++;
  1026  019B  3001               	movlw	1
  1027  019C  00BA               	movwf	??_ISR
  1028  019D  083A               	movf	??_ISR,w
  1029  019E  07B8               	addwf	_ping_time_count,f	;volatile
  1030                           
  1031                           ;main.c: 266: if (delay_time > 0)
  1032  019F  0837               	movf	_delay_time,w
  1033  01A0  1903               	btfsc	3,2
  1034  01A1  29A4               	goto	i1l922
  1035                           
  1036                           ;main.c: 267: {
  1037                           ;main.c: 268: delay_time--;
  1038  01A2  3001               	movlw	1
  1039  01A3  02B7               	subwf	_delay_time,f
  1040  01A4                     i1l922:	
  1041                           
  1042                           ;main.c: 269: }
  1043                           ;main.c: 270: }
  1044                           ;main.c: 283: if (GPIF)
  1045  01A4  1C0B               	btfss	11,0	;volatile
  1046  01A5  29AB               	goto	i1l150
  1047                           
  1048                           ;main.c: 284: {
  1049                           ;main.c: 285: if (GPIO3)
  1050  01A6  1D85               	btfss	5,3	;volatile
  1051  01A7  29AA               	goto	i1l928
  1052                           
  1053                           ;main.c: 286: {
  1054                           ;main.c: 287: flag_button ^= 1;
  1055  01A8  3004               	movlw	(0+1) shl (_flag_button& (0+7))
  1056  01A9  06CC               	xorwf	_flag_button/(0+8),f
  1057  01AA                     i1l928:	
  1058                           
  1059                           ;main.c: 288: }
  1060                           ;main.c: 289: GPIF = 0;
  1061  01AA  100B               	bcf	11,0	;volatile
  1062  01AB                     i1l150:	
  1063  01AB  083E               	movf	??_ISR+4,w
  1064  01AC  00DF               	movwf	95
  1065  01AD  083D               	movf	??_ISR+3,w
  1066  01AE  008A               	movwf	10
  1067  01AF  083C               	movf	??_ISR+2,w
  1068  01B0  0084               	movwf	4
  1069  01B1  0E3B               	swapf	(??_ISR+1)^0,w
  1070  01B2  0083               	movwf	3
  1071  01B3  0EDE               	swapf	94,f
  1072  01B4  0E5E               	swapf	94,w
  1073  01B5  0009               	retfie
  1074  01B6                     __end_of_ISR:	
  1075  005E                     btemp	set	94	;btemp
  1076  005E                     wtemp0	set	94
  1077                           
  1078                           	psect	intentry
  1079  0004                     __pintentry:	
  1080                           ;incstack = 0
  1081                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1082                           
  1083  0004                     interrupt_function:	
  1084  005E                     saved_w	set	btemp
  1085  0004  00DE               	movwf	btemp
  1086  0005  0E03               	swapf	3,w
  1087  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0007  00BB               	movwf	??_ISR+1
  1089  0008  0804               	movf	4,w
  1090  0009  00BC               	movwf	??_ISR+2
  1091  000A  080A               	movf	10,w
  1092  000B  00BD               	movwf	??_ISR+3
  1093  000C  085F               	movf	btemp+1,w
  1094  000D  00BE               	movwf	??_ISR+4
  1095  000E  2991               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    1
    Data        3
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     18      48

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___wmul

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     328
                                             11 BANK0      7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     304
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E     12      30       4       77.4%
BITBANK0            3E      0       1       3        1.6%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      30       6        0.0%
ABS                  0      0      30       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Mar 16 16:32:19 2018

                      pc 0002              __CFG_CP$OFF 0000                       _GO 00F9  
                     _a1 002B                       _a2 0029                       _h1 0034  
                     _h2 0033                       fsr 0004      ___wmul@multiplicand 0041  
                    l113 0060                      l130 00C0                      l123 00A6  
                    l109 0045                      l118 007F                      l127 00B0  
                    l234 01C1                      l900 0160                      l906 018C  
                    l850 0071                      l834 004D                      l772 01B9  
                    l874 008F                      l878 00AB                      l896 012F  
                    _GIE 005F                      u315 0059                      u421 0153  
                    u325 006B                      u422 0154                      _PS0 0408  
                    u423 0159                      u415 0139                      _PS1 0409  
                    u424 015A                      _PS2 040A                      u265 01C2  
           __CFG_CPD$OFF 0000                      u275 01C9                      u435 016D  
                    _ISR 0191                      u445 0186                      u395 0121  
                    _PSA 040B                      _mag 0020                      fsr0 0004  
                    indf 0000                     ?_ISR 003A                     _ADFM 00FF  
                   _ADON 00F8                     _CHS0 00FA                     _CHS1 00FB  
                   _ANS2 04FA                     _ANS3 04FB                     _T0IE 005D  
                   _T0IF 005A                     _T0CS 040D                     _IOC3 04B3  
                   _GPIF 0058                     _GPIO 0005                     _VCFG 00FE  
                   _TMR0 0001                     _main 001E                     _temp 0026  
                   btemp 005E                     start 000F                    ??_ISR 003A  
                  OSCCAL 0090                    _ADCS0 04FC                    _ADCS1 04FD  
                  _ADCS2 04FE                    STATUS 0003                    ?_main 003A  
          __CFG_WDTE$OFF 0000                    _CMCON 0019                    _GPIO3 002B  
                  _GPIO5 002D                    i1l150 01AB                    i1l922 01A4  
                  i1l928 01AA                    _VRCON 0099                    main@i 004B  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 005E           __CFG_MCLRE$OFF 0000          __initialization 0010  
           __end_of_main 0191                   ??_main 0045        _pulse_sensitivity 002D  
                 _ADRESH 001E                   _ADRESL 009E                   _INTCON 000B  
                 _TRISIO 0085           __CFG_PWRTE$OFF 0000                   ___wmul 01B6  
                 _n_bins 01E6                   _led_on 0261                   saved_w 005E  
__end_of__initialization 001C           __pcstackCOMMON 0000             __pidataBANK0 01E7  
             __pbssBANK0 0020               _delay_time 0037               __pmaintext 001E  
                ?___wmul 003F               __pintentry 0004               __stringtab 01E0  
        __size_of___wmul 0022               _n_time_off 004D                  __ptext1 01B6  
                __ptext2 0191             __size_of_ISR 0025                  _n_pings 004F  
        _ping_time_count 0038                  _old_mag 0023                  clrloop0 01D9  
   end_of_initialization 001C               _time_count 0031           __end_of___wmul 01D8  
         __end_of_n_bins 01E7            __pbitbssBANK0 0260      start_initialization 0010  
            __end_of_ISR 01B6                 ??___wmul 0000              __pdataBANK0 004D  
              ___latbits 0000            __pcstackBANK0 003A                _dc_offset 002F  
              __pstrings 01E0              _flag_button 0262        interrupt_function 0004  
         ___wmul@product 0043                clear_ram0 01D8             _new_measured 0035  
            _led_counter 0039              __stringbase 01E5        ___wmul@multiplier 003F  
     __end_of__stringtab 01E6                 _measured 0260            __size_of_main 0173  
               _tmp_GPIO 0036                 intlevel1 0000                stringcode 01E0  
               stringdir 01E0                 stringtab 01E0        __CFG_FOSC$INTRCIO 0000  
